@model WebAssignment.ViewModels.TicketFormViewModel
@using WebAssignment.Models
@{

    if (User.IsInRole(RoleName.Administrator))
    {
        Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_LayoutUser.cshtml";
    }
    bool exists;
    string valid = Request.Params["valid"];
    string error = (valid == "0") ? "Ticket cannot be deleted since a game has already been sold." : null;
    string filename, imgsource;
    if (Model == null || Model.Id == 0)
    {
        ViewBag.Title = "New Ticket";
        exists = false;
        filename = null;
        imgsource = null;
    }
    else
    {
        ViewBag.Title = "Edit Ticket";
        exists = true;
        filename = Model.ViewUpload;
        imgsource = @Url.Content("~/Uploads/" + filename);


    }
    string heading = (exists == false) ? "New Ticket" : "Edit Ticket";

}
<h2>@heading</h2>
@using (Html.BeginForm("Save", "Ticket", FormMethod.Post, new { enctype = "multipart/form-data" }))
{  
    <div class="form-group">
        @Html.LabelFor(m => m.Owner, new { @class = "required" })
        @Html.TextBoxFor(m => m.Owner, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Owner)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.CategoryId, new { @class = "required" })
        @Html.DropDownListFor(m => m.CategoryId, new SelectList(Model.Categories, "Id", "Name"), "Select Category", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.CategoryId)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Section, new { @class = "required" })
        @Html.TextBoxFor(m => m.Section, new { @class = "form-control", @type = "number", @min = 1 })
        @Html.ValidationMessageFor(m => m.Section)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Row, new { @class = "required" })
        @Html.TextBoxFor(m => m.Row, new { @class = "form-control", @type = "number", @min = 1 })
        @Html.ValidationMessageFor(m => m.Row)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Seat, new { @class = "required" })
        @Html.TextBoxFor(m => m.Seat, new { @class = "form-control", @type = "number", @min = 1 })
        @Html.ValidationMessageFor(m => m.Seat)
    </div>
    <div class="form-group" style="width:280px">
        <label>Assign to Games</label>
        <br>
        <select id="ticketSelect" data-live-search="true" class="selectpicker form-control" multiple name="SelectedGames" data-actions-box="true" data-selected-text-format="count > 0">
            @foreach (@SelectListGroup grp in Model.Groups)
            {

                var grpname = grp.Name;

                <optgroup label="@grpname">
                    @foreach (@SelectListItem item in Model.Games)
                    {
                        if (item.Group.Name == grp.Name)
                        {
                            var sel = false;
                            if (Model.SelectedGames != null)
                            {
                                foreach (string s in Model.SelectedGames)
                                {
                                    if (item.Text == s)
                                    {
                                        sel = true;
                                    }
                                }
                            }

                            <option selected=@sel value=@item.Value>@item.Text</option>
                        }

                    }
                </optgroup>
            }

        </select>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ViewUpload)
        <div class="input-group" style="width:280px">
            <span class="input-group-btn">
                <span class="btn btn-default btn-file">
                    Browse… <input name="postedFile" type="file" id="imgInp">
                </span>
            </span>
                    
            <input value=@filename type="text" class="form-control" readonly >
        </div>
        <br>
        @if (exists)
        {
            if (Model.ViewUpload != null)
            {
                <img id='img-upload' src=@imgsource />
            }
            else
            {
                <img id='img-upload' />
            }
        }
        else
        {
            <img id='img-upload' />
        }

    </div>
    @Html.HiddenFor(m => m.Id)
    @Html.AntiForgeryToken()
    <button type="submit" class="btn btn-primary">Save</button>

    if (@exists)
    {
        <input type="button" class="btn btn-danger" value="Delete Ticket" onclick="location.href='@Url.Action("Remove", "Ticket", new { id = Model.Id })'" />
        <div class="field-validation-error">@error</div>
    }


}

@section Styles{
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.6.3/css/bootstrap-select.min.css" />
}

@section scripts
{
    <script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.6.3/js/bootstrap-select.min.js"></script>
    @Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">
        $(function () {
            $('#Game_Date').datetimepicker({
                format: "DD/MM/YYYY HH:mm",
                showClose: true,
                showClear: true,
                useCurrent: false,
                minDate: new Date(),
                toolbarPlacement: 'top',
            }).on('dp.change', function (e) {
                //$(this).data('DateTimePicker').hide();
            })

        });

        $(function () {
            try {
                $.validator.addMethod('date',
                    function (value, element) {
                        if (this.optional(element)) {
                            return true;
                        }
                        var ok = true;
                        try {
                            ok = moment(value, "DD/MM/YYYY HH:mm", true).isValid();
                        } catch (err) {
                            ok = false;
                        }
                        return ok;
                    });
            } catch (e) { }
        });
</script>

    <script>
        $(document).ready(function () {
            $(document).on('change', '.btn-file :file', function () {
                var input = $(this),
                    label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
                input.trigger('fileselect', [label]);
            });

            $('.btn-file :file').on('fileselect', function (event, label) {

                var input = $(this).parents('.input-group').find(':text'),
                    log = label;

                if (input.length) {
                    input.val(log);
                } else {
                    if (log) alert(log);
                }

            });
            function readURL(input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('#img-upload').attr('src', e.target.result);
                    }

                    reader.readAsDataURL(input.files[0]);
                }
            }

            $("#imgInp").change(function () {
                readURL(this);
            });
        });
    </script>
}